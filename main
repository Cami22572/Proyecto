// Universidad del Valle de Guatemala
// BE3023 Digital 2
// Camila Santiago 22572
// Proyecto 1
// Micro: ESP32 DEV Kit 1.0
// Sensor de temperatura, con leds indicadoras, displays que muestran el valor y servo que gira dependiendo del estado

//---------------------Librerías---------------------
#include <Arduino.h> // Librería Arduino
#include <AdafruitIO_WiFi.h> // Librería Adafruit con WiFi
#include <driver/ledc.h> // Librería ledc no creo que sea necesaria

//---------------------Pines---------------------
#define TEMPERATURE_PIN 12
#define BUTTON_PIN 13

#define RED_PIN 5
#define YELLOW_PIN 16
#define GREEN_PIN 14

#define SERVO_PIN 23
#define PWM_FREQ 50
#define PWM_RES 10

// Pines para los displays de 7 segmentos
int segmentPins[7] = {25, 33, 21, 17, 22, 26, 27}; // Pines que controlan cada segmento del display

// Pines para seleccionar cada dígito del display
int displaySelect[3] = {32, 18, 19}; // Pines que controlan los dígitos de los displays

//---------------------Variables---------------------
float temp = 0.0;
unsigned long lastReadTime = 0;
bool showTemp = false;
const unsigned long DISPLAY_DURATION = 5000;
int digits[3] = {0, 0, 0};

//---------------------Configuración Adafruit---------------------
//#define IO_USERNAME "CamilaSantiago"
//#define IO_KEY "aio_SFba62VRWT0UA18NSMapKOXBrSyR"
//#define WIFI_SSID "Camila"
//#define WIFI_PASS "camila09"
//AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);
//AdafruitIO_Feed *temperatureFeed = io.feed("temperature");

//---------------------Mapa de los displays---------------------
// Mapa de segmentos para mostrar números del 0-9 en el display de 7 segmentos
const int digitMap[10][7] = {
  {0, 0, 0, 0, 0, 0, 1},  // 0
  {1, 0, 0, 1, 1, 1, 1},  // 1
  {0, 0, 1, 0, 0, 1, 0},  // 2
  {0, 0, 0, 0, 1, 1, 0},  // 3
  {1, 0, 0, 1, 1, 0, 0},  // 4
  {0, 1, 0, 0, 1, 0, 0},  // 5
  {0, 1, 0, 0, 0, 0, 0},  // 6
  {0, 0, 0, 1, 1, 1, 1},  // 7
  {0, 0, 0, 0, 0, 0, 0},  // 8
  {0, 0, 0, 0, 1, 0, 0}   // 9
};

//---------------------Interrupción del botón---------------------
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;
struct Button {
  const uint8_t PIN;
  bool pressed;
  bool laststate;
};
Button button = {BUTTON_PIN, false, false};

void IRAM_ATTR BUTTON_ISR() {
  portENTER_CRITICAL_ISR(&mux);
  button.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

//---------------------Control del LEDs---------------------/
void updateLedColor(float t) {
  if(t < 37.0) {
    ledcWrite(9, 1023); // Verde
    ledcWrite(8, 0);    // Rojo
    ledcWrite(10,0);   // Amarillo
  } else if(t < 37.5) {
    ledcWrite(9, 0); // Verde
    ledcWrite(8, 0);    // Rojo
    ledcWrite(10,1023);   // Amarillo
  } else {
    ledcWrite(9, 0); // Verde
    ledcWrite(8, 1023);    // Rojo
    ledcWrite(10, 0);   // Amarillo
  }
}

//---------------------Control del Servo---------------------/
void updateServo(float t) {
  if(t < 37.0) {
    ledcWrite(0, 128); // Verde
  } else if(t < 37.5) {
    ledcWrite(0, 77); // Amarillo
  } else {
    ledcWrite(0, 26); // Rojo
  }
}

//---------------------Función de digitos de los displays---------------------/
void displayDigit(int digit, int sel) {
  digitalWrite(displaySelect[sel], HIGH);
  for (int i = 0; i < 7; i++) {
    digitalWrite(segmentPins[i], digitMap[digit][i]);
  }
  delay(1);
  digitalWrite(displaySelect[sel], LOW);
}

//---------------------Mostrar temperatura en displays---------------------/
void displayTemperature(float temperature) {
  int tempInt = int(temperature * 10);
  digits[0] = tempInt / 100; 
  digits[1] = (tempInt / 10) % 10; 
  digits[2] = tempInt % 10; 

  for (int i = 0; i < 3; i++) {
    displayDigit(digits[i], i);
  }
}

//---------------------Configuración PWM---------------------/
void initLedc(uint8_t pin, int channel) {
  ledcSetup(channel, PWM_FREQ, PWM_RES);
  ledcAttachPin(pin, channel);
  ledcWrite(channel, 0);
}

//---------------------Setup---------------------/
void setup() {
  pinMode(TEMPERATURE_PIN, INPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  initLedc(RED_PIN, 8);
  initLedc(GREEN_PIN, 9);
  initLedc(YELLOW_PIN, 10);
  initLedc(SERVO_PIN, 0);
  
  for(int i = 0; i < 7; i++) {
    pinMode(segmentPins[i], OUTPUT);
  }
  
  for(int i = 0; i < 3; i++) {
    pinMode(displaySelect[i], OUTPUT);
    digitalWrite(displaySelect[i], LOW);
  }
  
  Serial.begin(115200);
  attachInterrupt(BUTTON_PIN, BUTTON_ISR, RISING);
}

//---------------------Loop---------------------/
void loop() {
  if (button.pressed != button.laststate) {
    if (button.pressed) {
      temp = analogRead(TEMPERATURE_PIN) * ((3.3 / 4095.0) * 100) + 25;
      Serial.print(temp);
      Serial.print("\n");
      
      updateLedColor(temp);
      updateServo(temp);
      
      showTemp = true;
      lastReadTime = millis();
      
      button.pressed = false;
    }
  }

  if (showTemp && millis() - lastReadTime < DISPLAY_DURATION) {
    displayTemperature(temp);
  }

  button.laststate = button.pressed;
  
  delay(5);
}
